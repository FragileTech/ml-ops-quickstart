"""Mloq license command implementation."""
from pathlib import Path

import click
from omegaconf import DictConfig, MISSING

from mloq.command import Command
from mloq.config.param_patch import param
from mloq.files import code_of_conduct, contributing, dco, LICENSES


OPEN_SOURCE_FILES = [dco, contributing, code_of_conduct]


class LicenseCMD(Command):
    """Implement the functionality of the license Command."""

    cmd_name = "license"
    files = tuple([file for file in LICENSES.values()] + OPEN_SOURCE_FILES)
    LICENSES = LICENSES
    disable = param.Boolean(default=None, doc="Disable license command?")
    open_source = param.Boolean(MISSING, doc="Is the project Open Source?")
    license = param.String("MIT", doc="Project license type")
    copyright_year = param.Integer("${current_year:}", doc="Year when the project started")
    copyright_holder = param.String("${globals.owner}", doc="Copyright holder")
    project_name = param.String(doc="Select project name")
    project_url = param.String("${globals.project_url}", doc="GitHub project url")
    email = param.String("${globals.email}", doc="Owner contact email")

    def interactive_config(self) -> DictConfig:
        """Generate the configuration of the project interactively."""
        click.echo("Provide the values to generate the project license files.")
        return self.parse_config()

    def record_files(self) -> None:
        """Register the files that will be generated by mloq."""
        conf = self.record.config.license
        if conf.open_source:
            for file in OPEN_SOURCE_FILES:
                self.record.register_file(file=file, path=Path())
            license_file = self.LICENSES[conf.license]
            self.record.register_file(file=license_file, path=Path())
