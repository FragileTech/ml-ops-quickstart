"""Mloq docs command implementation."""
from pathlib import Path
from typing import Tuple

import click
from omegaconf import DictConfig
import param

from mloq.command import Command
from mloq.files import conf_py, docs_req, index_md, make_bat_docs, makefile_docs


DOCS_FILES = [conf_py, index_md, makefile_docs, make_bat_docs, docs_req]


class DocsCMD(Command):
    """Implement the functionality of the docs Command."""

    cmd_name = "docs"
    disable = param.Boolean(False, doc="Disable docs command?")
    project_name = param.String(doc="Select project name")
    description = param.String(doc="Short description of the project")
    author = param.String("${globals.author}", doc="Author(s) of the project")
    copyright_year = param.Integer(doc="Year when the project started")
    copyright_holder = param.String("${docs.author}", doc="Copyright holder")
    files = tuple(DOCS_FILES)

    @property
    def directories(self) -> Tuple[Path]:
        """Tuple containing Paths objects representing the directories created by the command."""
        return tuple([Path("docs") / "source" / "markdown"])

    def interactive_config(self) -> DictConfig:
        """Generate the configuration of the project interactively."""
        click.echo("Provide the values to generate the project documentation.")
        return super(DocsCMD, self).interactive_config()

    def record_files(self) -> None:
        """Register the files that will be generated by mloq."""
        source_files = {"conf.py", "index.md"}
        docs_path = Path("docs")
        for file in self.files:
            path = (docs_path / "source") if str(file.dst) in source_files else docs_path
            self.record.register_file(file=file, path=path)
