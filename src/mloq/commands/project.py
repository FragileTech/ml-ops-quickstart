"""Mloq project command implementation."""
from pathlib import Path
from typing import Tuple

from omegaconf import MISSING

from mloq.command import Command
from mloq.config.param_patch import param
from mloq.files import (
    codecov,
    gitignore,
    init,
    main,
    makefile,
    pre_commit_hook,
    readme,
    test_main,
    test_req,
    version,
)


PROJECT_FILES = [
    codecov,
    gitignore,
    readme,
    makefile,
    init,
    main,
    test_main,
    version,
    test_req,
    pre_commit_hook,
]


class ProjectCMD(Command):
    """Implement the functionality of the project Command."""

    cmd_name = "project"
    files = tuple(PROJECT_FILES)
    disable = param.Boolean(default=False, doc="Disable project command?")
    docker = param.Boolean(MISSING, doc="Does the project contains a docker container?")
    project_name = param.String("${globals.project_name}", doc="Select project name")
    owner = param.String("${globals.owner}", doc="Github handle of the project owner")
    description = param.String("${globals.description}", doc="Short description of the project")
    project_url = param.String("${globals.project_url}", doc="GitHub project url")
    license = param.String("MIT", doc="Project license type")
    tests = param.Boolean(True, doc="Add support for pytest")

    @property
    def directories(self) -> Tuple[Path]:
        """Tuple containing Paths objects representing the directories created by the command."""
        project_folder = self.record.config.project.project_name.replace(" ", "_")
        return tuple([Path("src") / project_folder, Path("tests")])

    def record_files(self) -> None:
        """Register the files that will be generated by mloq."""
        self.record.register_file(file=readme, path=Path())
        self.record.register_file(file=makefile, path=Path())
        project_folder = Path("src") / self.record.config.project.project_name.replace(" ", "_")
        description = "Python package header for the project module"
        self.record.register_file(file=init, path=project_folder, description=description)
        self.record.register_file(file=main, path=project_folder)
        self.record.register_file(file=version, path=project_folder)
        description = "Python package header for the test module"
        self.record.register_file(file=init, path=Path("tests"), description=description)
        self.record.register_file(file=test_main, path=Path("tests"))
        root_files = [readme, makefile, test_req, pre_commit_hook, codecov, gitignore]
        for file in root_files:
            self.record.register_file(file=file, path=Path())
