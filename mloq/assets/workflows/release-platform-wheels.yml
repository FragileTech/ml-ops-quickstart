name: Release package

on:
  pull_request:
    branches:
      - {{default_branch}}
    types: [closed]

jobs:
  Bump-version:
    if: github.repository_owner == '{{project_org}}'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
    - name: Install dependencies
      run: |
        git config user.name "{{bot_name}}"
        git config user.email "{{bot_email}}"
        git config pull.ff only
        pip install bump2version
    - name: Run bump version
      run: |
        set -e
        git pull --no-edit origin {{default_branch}}
        version_file={{project_name}}/version.py
        current_version=$(grep __version__ $version_file | cut -d\" -f2)
        bumpversion --tag --current-version $current_version --commit patch $version_file
        git remote add {{bot_name}}-remote https://{{bot_name}}:$${{'{{'}} secrets.BOT_AUTH_TOKEN {{'}}'}}@github.com/$GITHUB_REPOSITORY
        git push --tags {{bot_name}}-remote HEAD:{{default_branch}}
        set +e
  Release-source:
    needs: Bump-version
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow

      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          python -m pip install -U setuptools twine wheel

      - name: Build package
        run: |
          python setup.py --version
          python setup.py sdist --format=gztar
          twine check dist/*

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@{{default_branch}}
        with:
          user: __token__
          password: ${{'{{'}} secrets.PYPI_PASS {{'}}'}}

  Release-wheels:
    needs: Release-source
    runs-on: ${{'{{'}} matrix.os {{'}}'}}
    strategy:
      fail-fast: false
      matrix:
        os: [ windows-latest, macOS-latest ]
        python-version: {{python_versions}}
        include:
          - os: ubuntu-latest
            python-version: 3.8
            wheel: aarch64
          - os: ubuntu-latest
            python-version: 3.8
            wheel: x86
    steps:
      - uses: actions/checkout@v2
      - run: |
          git fetch --prune --unshallow

      - name: Set up Python ${{'{{'}} matrix.python-version {{'}}'}}
        uses: actions/setup-python@v2
        with:
          python-version: ${{'{{'}} matrix.python-version {{'}}'}}

      - name: Docker Buildx
        if: matrix.os == 'ubuntu-latest'
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v3.3.0
        with:
          buildx-version: latest
          qemu-version: latest

      - name: Install dependencies
        run: |
          python -m pip install --upgrade -q pip pytest wheel setuptools twine
          python -m pip install -r requirements-test.txt

      - name: Test with pytest
        if: matrix.os != 'ubuntu-latest'
        run: |
          pip install .
          pytest

      - name: Build macOS/Windows wheel
        if: matrix.os != 'ubuntu-latest'
        run: python setup.py -q bdist_wheel

      - name: Build ManyLinux2014_aarch64 wheels
        if: matrix.wheel == 'aarch64'
        run: |
          docker buildx build --platform linux/arm64 \
          -t ujson_aarch64 --output tmpwheelhouse -f scripts/Dockerfile_aarch64 .
          mkdir -p dist
          mv tmpwheelhouse/wheelhouse/*.whl dist/

      - name: Build x86 Linux wheels
        if: matrix.wheel == 'x86'
        run: |
          docker run -e PLAT=manylinux1_x86_64 -v `pwd`:/io quay.io/pypa/manylinux1_x86_64 /io/scripts/build-manylinux-wheels.sh
          docker run -e PLAT=manylinux1_i686 -v `pwd`:/io quay.io/pypa/manylinux1_i686 /io/scripts/build-manylinux-wheels.sh

      - name: Upload as build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist/*.whl

      - name: Publish package to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{'{{'}} secrets.PYPI_PASS {{'}}'}}
        run: twine upload --skip-existing dist/*.whl