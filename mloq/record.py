"""This module contains the classes that keep track of the internal state of the\
 application when running a Command."""
from pathlib import Path
from typing import Dict, List, Optional, Tuple, Union

from omegaconf import DictConfig

from mloq.files import File


class Ledger:
    """Keep track of the generated files."""

    def __init__(self):
        """Initialize a new instance of the Ledger class."""
        self._files = []

    @property
    def files(self) -> List[Tuple[str, str]]:
        """Return the list of generated file names."""
        return [(str(f), d) for f, d in sorted(self._files)]

    def register(self, file: Union[File, str, Path], description: Optional[str] = None) -> None:
        """Append another generated file to the book."""
        if isinstance(file, File):
            description = file.description if description is None else description
            file = file.dst
        elif description is None:
            raise ValueError("description is None. Please provide a file description")
        self._files.append((Path(file), description))


class CMDRecord:
    """
    Keep track of files and directories that will be created by mloq.

    Elementary class used for storing the files and directories required
    by the user's needs for his/her machine learning project. This class
    registers the configuration values entered by the user, which will later
    be used as a basis for generating the files and directories needed for
    the project.

    This class is initialized from a configuration dictionary. The dictionary
    can be either a DictConfig element or an empty dictionary.

    Attributes of this class:
        config: DictConfig element that stores the configuration parameters.
        files: Dictionary that registers the files generated by mloq. Keys
            are Paths strings labeling the location where the file will
            be created. Values are File elements referencing the current
            file.
        directories: List that stores the directories that will be generated
            by the mloq command according to the user's configuration.
    """

    def __init__(self, config: Optional[DictConfig] = None):
        """Initialize a new instance of the CMDRecord class."""
        self._files: Dict[Path, File] = {}
        self._directories: List[Path] = []
        self._config: DictConfig = DictConfig({}) if config is None else config

    @property
    def config(self) -> DictConfig:
        """Store the configuration parameters that govern the project's structure."""
        return self._config

    @property
    def files(self) -> Dict[Path, File]:
        """Contain the templating files used by mloq to generate the requested files."""
        return self._files

    @property
    def directories(self) -> List[Path]:
        """Contain the folders that will be created by mloq for storing the project's files."""
        return self._directories

    def update_config(self, config: DictConfig) -> None:
        """Update the configuration dictionary according to the values entered by the user."""
        self._config = config

    def register_file(
        self,
        file: File,
        path: Union[Path, str],
        description: Optional[str] = None,
    ) -> None:
        """
        Append a new requested file to the 'files' container.

        Keys are Path strings describing the location where the file will
        be created. Values are File objects containing the information
        of the file that will be generated.
        """
        if description is None and not file.description:
            raise ValueError("File description cannot be None. Please provide a description.")
        elif description is not None:
            file = File(
                name=file.name,
                src=file.src,
                dst=file.dst,
                description=description,
                is_static=file.is_static,
            )
        self.files[Path(path) / file.dst] = file

    def register_directory(self, path: Union[Path, str]) -> None:
        """Append a new requested directory path to the 'directories' container."""
        self.directories.append(Path(path))
