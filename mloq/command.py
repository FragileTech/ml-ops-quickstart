"""This module defines the base Command class used for defining mloq commands."""
from pathlib import Path
from typing import NamedTuple, Tuple

from omegaconf import DictConfig, OmegaConf

from mloq.failure import MissingConfigValue
from mloq.writer import CMDRecord


class Command:
    """
    Define blueprints for generating custom mloq commands.

    Base class used for defining new mloq commands. It establishes the
    fundamental methods for defining and updating the configuration values
    used to create the necessary files for the user's project, while
    registering the latter for later use.

    This class is initialized from a CMDRecord instance, object where the
    user's configuration, as well as the files and directories that will
    be generated, are stored.

    class Attributes:
        name: Name of the command.
        files: Tuple containing the templates used for creating the \
               necessary files of your project.
        CONFIG: NamedTuple containing the keys and values of your \
                configuration RELATIVE to the command.
    """

    name: str = ""
    files: tuple = tuple()
    CONFIG: NamedTuple = NamedTuple("Config", [])()

    def __init__(self, record: CMDRecord, interactive: bool = False):
        """
        Instantiate the Command class.

        Args:
            record: CMDRecord instance. Keeps a record of the user's
                configuration. It registers the files and directories
                that will be generated by mloq.
            interactive: Boolean value. If True, configuration values are
                introduced interactively. Otherwise, the configuration is
                parsed from a user-generated configuration file.
        """
        self._record = record
        self.interactive = interactive

    @property
    def record(self) -> CMDRecord:
        """Keep track of files and directories generated by mloq in a CMDRecord instance."""
        return self._record

    @property
    def directories(self) -> Tuple[Path]:
        """Tuple containing Paths objects representing the directories created by the command."""
        return tuple()

    @property
    def config(self) -> DictConfig:
        """Command configuration stored in a DictConfig instance."""
        return OmegaConf.select(self.record.config, self.name, throw_on_missing=True)

    def parse_config(self) -> DictConfig:
        """
        Update the configuration dictionary from the data entered by the user.

        Given the basic configuration skeleton (contained in mloq.yml), \
        this method updates the values of those parameters (included in \
        CONFIG object) that are related to the selected command. Incoming \
        values are introduced either interactively or via a custom user's \
        mloq.yml file.

        Returns:
            It returns an updated version of the 'config' attribute of \
            the 'record' instance.
        """
        for param in self.CONFIG:
            try:
                # Infer the config value from the current command record.
                value = param(self.record.config[self.name], self.interactive, raise_error=False)
                # TODO: Figure out if checking the entire registered config makes sense.
                # Reads configuration value from the whole record
                # so you can infer values from other commands
                if value is None or value == "???":
                    value = param(self.record.config, self.interactive)
            except MissingConfigValue as e:
                msg = f"Config value {param.name} not defined for {self.name} command."
                raise MissingConfigValue(msg) from e
            # Write the record config only in the entry that is handled by the current command.
            setattr(self.record.config[self.name], param.name, value)
        return self.record.config

    def interactive_config(self) -> DictConfig:
        """Pass user's configuration interactively."""
        return self.parse_config()

    def record_files(self) -> None:
        """Register the files that will be generated by mloq."""
        if len(self.files) > 0:
            raise NotImplementedError

    def record_directories(self) -> None:
        """Register the directories that will be generated by mloq."""
        for directory in self.directories:
            self._record.register_directory(directory)

    def configure(self) -> None:
        """
        Save the updated version of the 'config' attribute.

        After parsing the new configuration values introduced by the user,
        this method registers and saves this updated configuration within
        the '_config' attribute of the 'record' instance.
        """
        if self.interactive:
            config = self.interactive_config()
        else:
            config = self.parse_config()
        self.record.update_config(config)

    def run_side_effects(self) -> None:
        """Apply additional configuration methods."""
        pass

    def run(self) -> CMDRecord:
        """
        Record the files and directories generated by mloq according to the user's configuration.

        This method updates the configuration dictionary with the values
        introduced by the user. Once the parameters have been revised,
        the files and directories that will be generated by mloq are
        registered within the 'record' instance.

        Returns:
            It returns an updated version of the CMDRecord instance, where
                the files and directories that will be generated by mloq
                are recorded within the 'record' instance.
        """
        self.configure()
        self.record_directories()
        self.record_files()
        self.run_side_effects()
        return self.record
