import os
from pathlib import Path
from typing import Union

from omegaconf import DictConfig

from mloq.files import File, what_mloq_generated
from mloq.record import CMDRecord, Ledger
from mloq.templating import write_template


class Writer:
    """Write all the files specified on the provided CMDRecord."""

    def __init__(self, path: Union[Path, str], record: CMDRecord, overwrite: bool = False):
        self._record = record
        self._ledger = Ledger()
        self._path = Path(path)  # Path to the project root directory
        self.overwrite = overwrite

    @property
    def path(self) -> Path:
        return self._path

    @property
    def ledger(self) -> Ledger:
        return self._ledger

    @property
    def record(self) -> CMDRecord:
        return self._record

    def create_directories(self) -> None:
        for directory in self.record.directories:
            os.makedirs(self.path / directory, exist_ok=True)

    def write_templates(self) -> None:
        for path, file in self.record.files.items():
            self.write_template(file=file, path=path, config=self.record.config)

    def dump_ledger(self) -> None:
        """
        Write the summary of the generated files.

        This method collects the elements stored in ledger to create a markdown
        document that summarizes all the files generated by the MLOQ application.

        """
        config = DictConfig({**self.record.config, "generated_files": self.ledger.files})
        self.write_template(
            what_mloq_generated,
            path=what_mloq_generated.dst,
            config=config,
        )

    def write_template(
        self,
        file: File,
        path: Path,
        config: DictConfig,
    ) -> None:
        """
        Create new file containing the rendered template configuration.

        Args:
            file: File object representing the jinja template that will be rendered.
            path: Target folder where the generated files will be written.
            config: DictConfig containing the selected project configuration.

        Returns:
            None.
        """
        write_template(
            file=file,
            config=config,
            path=self.path / path,
            overwrite=self.overwrite,
            ledger=self.ledger,
        )

    def run(self) -> None:
        self.create_directories()
        self.write_templates()
        self.dump_ledger()
