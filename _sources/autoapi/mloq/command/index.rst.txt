:py:mod:`mloq.command`
======================

.. py:module:: mloq.command

.. autoapi-nested-parse::

   This module defines the base Command class used for defining mloq commands.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   mloq.command.CommandMixin
   mloq.command.Command




.. py:class:: CommandMixin(record, interactive = False, *args, **kwargs)

   Class containing the interface for defining an MLOQ Command.

   .. py:attribute:: files
      :annotation: :tuple

      

   .. py:attribute:: cmd_name
      :annotation: = command

      

   .. py:method:: record()
      :property:

      Return a CMDRecord that keeps track of the files and directories the command creates.


   .. py:method:: directories()
      :property:

      Tuple containing Paths objects representing the directories the Command creates.

      Override this property if your command creates any directories.

      :returns: Tuple of :class:`Path` objects representing the path to the directories that the
                :class:`Command` will create.


   .. py:method:: parse_config()

      Update the configuration dictionary from the data entered by the user.

      Given the basic configuration skeleton (contained in mloq.yaml),         this method updates the values of those parameters (included in         CONFIG object) that are related to the selected command. Incoming         values are introduced either interactively or via a custom user's         mloq.yaml file.

      :returns: It returns an updated version of the 'config' attribute of             the 'record' instance.


   .. py:method:: interactive_config()
      :abstractmethod:

      Pass user's configuration interactively.


   .. py:method:: record_files()

      Register the files that will be generated by mloq.


   .. py:method:: record_directories()

      Register the directories that will be generated by mloq.


   .. py:method:: configure()

      Save the updated version of the 'config' attribute.

      After parsing the new configuration values introduced by the user,
      this method registers and saves this updated configuration within
      the '_config' attribute of the 'record' instance.


   .. py:method:: run_side_effects()

      Apply additional configuration methods.


   .. py:method:: run()

      Record the files and directories generated by mloq according to the user's configuration.

      This method updates the configuration dictionary with the values
      introduced by the user. Once the parameters have been revised,
      the files and directories that will be generated by mloq are
      registered within the 'record' instance.

      :returns:

                It returns an updated version of the CMDRecord instance, where
                    the files and directories that will be generated by mloq
                    are recorded within the 'record' instance.



.. py:class:: Command(record, interactive = False, **kwargs)

   Bases: :py:obj:`CommandMixin`, :py:obj:`mloq.config.prompt.Promptable`

   Define blueprints for generating custom mloq commands.

   Base class used for defining new mloq commands. It establishes the
   fundamental methods for defining and updating the configuration values
   used to create the necessary files for the user's project, while
   registering the latter for later use.

   This class is initialized from a CMDRecord instance, object where the
   user's configuration, as well as the files and directories that will
   be generated, are stored.

   class Attributes:
       name: Name of the command.
       files: Tuple containing the templates used for creating the                necessary files of your project.
       CONFIG: NamedTuple containing the keys and values of your                 configuration RELATIVE to the command.

   .. py:method:: interactive_config()

      Pass user's configuration interactively.


   .. py:method:: _config_from_record()



