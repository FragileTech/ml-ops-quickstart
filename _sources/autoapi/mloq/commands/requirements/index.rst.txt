:py:mod:`mloq.commands.requirements`
====================================

.. py:module:: mloq.commands.requirements

.. autoapi-nested-parse::

   Mloq requirements command implementation.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   mloq.commands.requirements.RequirementsCMD




Attributes
~~~~~~~~~~

.. autoapisummary::

   mloq.commands.requirements.REQUIREMENTS_PATH
   mloq.commands.requirements.requirements
   mloq.commands.requirements.data_science_req
   mloq.commands.requirements.data_viz_req
   mloq.commands.requirements.pytorch_req
   mloq.commands.requirements.tensorflow_req
   mloq.commands.requirements.lint_req
   mloq.commands.requirements.test_req
   mloq.commands.requirements.dogfood_req
   mloq.commands.requirements.docs_req
   mloq.commands.requirements.REQUIREMENTS_FILES
   mloq.commands.requirements.REQUIREMENT_CHOICES


.. py:data:: REQUIREMENTS_PATH
   

   

.. py:data:: requirements
   

   

.. py:data:: data_science_req
   

   

.. py:data:: data_viz_req
   

   

.. py:data:: pytorch_req
   

   

.. py:data:: tensorflow_req
   

   

.. py:data:: lint_req
   

   

.. py:data:: test_req
   

   

.. py:data:: dogfood_req
   

   

.. py:data:: docs_req
   

   

.. py:data:: REQUIREMENTS_FILES
   

   

.. py:data:: REQUIREMENT_CHOICES
   :annotation: = ['data-science', 'data-viz', 'torch', 'tensorflow', 'none', 'dogfood', 'None']

   

.. py:class:: RequirementsCMD(record, interactive = False)

   Bases: :py:obj:`mloq.command.Command`

   Implement the functionality of the requirements Command.

   .. py:attribute:: cmd_name
      :annotation: = requirements

      

   .. py:attribute:: files
      

      

   .. py:attribute:: disable
      

      

   .. py:attribute:: requirements
      

      

   .. py:attribute:: REQUIREMENTS_ALIASES
      

      

   .. py:method:: __del__()

      Remove the temporary directory when the instance is deleted.


   .. py:method:: get_aliased_requirements_file(option)
      :classmethod:

      Get requirement file from aliased name.


   .. py:method:: read_requirements_file(option)
      :classmethod:

      Return the content of the target requirements file form an aliased name.


   .. py:method:: compose_requirements(options)
      :classmethod:

      Return the content requirements.txt file with pinned dependencies.

      The returned string contains the combined dependencies         for the different options sorted alphabetically.

      :param options: Iterable containing the aliased names of the target                      dependencies for the project.

      :returns: str containing the pinned versions of all the selected requirements.


   .. py:method:: interactive_config()

      Generate the configuration of the project interactively.


   .. py:method:: requirements_is_empty(options)
      :staticmethod:

      Return True if no requirements are specified for the project.


   .. py:method:: record_files()

      Register the files that will be generated by mloq.



