:py:mod:`mloq.commands.docs`
============================

.. py:module:: mloq.commands.docs

.. autoapi-nested-parse::

   Mloq docs command implementation.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   mloq.commands.docs.DocsCMD




Attributes
~~~~~~~~~~

.. autoapisummary::

   mloq.commands.docs.DOCS_ASSETS_PATH
   mloq.commands.docs.makefile_docs
   mloq.commands.docs.make_bat_docs
   mloq.commands.docs.docs_req
   mloq.commands.docs.conf_py
   mloq.commands.docs.index_md
   mloq.commands.docs.deploy_docs
   mloq.commands.docs.DOCS_FILES


.. py:data:: DOCS_ASSETS_PATH
   

   

.. py:data:: makefile_docs
   

   

.. py:data:: make_bat_docs
   

   

.. py:data:: docs_req
   

   

.. py:data:: conf_py
   

   

.. py:data:: index_md
   

   

.. py:data:: deploy_docs
   

   

.. py:data:: DOCS_FILES
   

   

.. py:class:: DocsCMD(record, interactive = False, **kwargs)

   Bases: :py:obj:`mloq.command.Command`

   Implement the functionality of the docs Command.

   .. py:attribute:: cmd_name
      :annotation: = docs

      

   .. py:attribute:: disable
      

      

   .. py:attribute:: project_name
      

      

   .. py:attribute:: description
      

      

   .. py:attribute:: author
      

      

   .. py:attribute:: copyright_year
      

      

   .. py:attribute:: copyright_holder
      

      

   .. py:attribute:: deploy_docs
      

      

   .. py:attribute:: default_branch
      

      

   .. py:attribute:: project_url
      

      

   .. py:attribute:: files
      

      

   .. py:method:: directories()
      :property:

      Tuple containing Paths objects representing the directories created by the command.


   .. py:method:: interactive_config()

      Generate the configuration of the project interactively.


   .. py:method:: record_files()

      Register the files that will be generated by mloq.



