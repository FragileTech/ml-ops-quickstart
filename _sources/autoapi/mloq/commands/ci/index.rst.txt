:py:mod:`mloq.commands.ci`
==========================

.. py:module:: mloq.commands.ci

.. autoapi-nested-parse::

   Mloq ci command implementation.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   mloq.commands.ci.CiCMD




Attributes
~~~~~~~~~~

.. autoapisummary::

   mloq.commands.ci.CI_ASSETS_PATH
   mloq.commands.ci.push_python_wkf
   mloq.commands.ci.WORKFLOW_FILES


.. py:data:: CI_ASSETS_PATH
   

   

.. py:data:: push_python_wkf
   

   

.. py:data:: WORKFLOW_FILES
   

   

.. py:class:: CiCMD(record, interactive = False, **kwargs)

   Bases: :py:obj:`mloq.command.Command`

   Implement the functionality of the ci Command.

   .. py:attribute:: cmd_name
      :annotation: :str = ci

      

   .. py:attribute:: ubuntu_version
      

      

   .. py:attribute:: disable
      

      

   .. py:attribute:: docker
      

      

   .. py:attribute:: project_name
      

      

   .. py:attribute:: default_branch
      

      

   .. py:attribute:: docker_org
      

      

   .. py:attribute:: bot_name
      

      

   .. py:attribute:: bot_email
      

      

   .. py:attribute:: ci_python_version
      

      

   .. py:attribute:: python_versions
      

      

   .. py:attribute:: ci_extra
      

      

   .. py:attribute:: vendor
      

      

   .. py:attribute:: open_source
      

      

   .. py:attribute:: author
      

      

   .. py:attribute:: owner
      

      

   .. py:attribute:: email
      

      

   .. py:attribute:: project_url
      

      

   .. py:attribute:: files
      

      

   .. py:method:: directories()
      :property:

      Tuple containing Paths objects representing the directories created by the command.


   .. py:method:: interactive_config()

      Generate the configuration of the project interactively.


   .. py:method:: record_files()

      Register the files that will be generated by mloq.



