:py:mod:`mloq.commands.license`
===============================

.. py:module:: mloq.commands.license

.. autoapi-nested-parse::

   Mloq license command implementation.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   mloq.commands.license.LicenseCMD




Attributes
~~~~~~~~~~

.. autoapisummary::

   mloq.commands.license.TEMPLATES_PATH
   mloq.commands.license.dco
   mloq.commands.license.mit_license
   mloq.commands.license.apache_license
   mloq.commands.license.gpl_license
   mloq.commands.license.LICENSES
   mloq.commands.license.LICENSE_FILES


.. py:data:: TEMPLATES_PATH
   

   

.. py:data:: dco
   

   

.. py:data:: mit_license
   

   

.. py:data:: apache_license
   

   

.. py:data:: gpl_license
   

   

.. py:data:: LICENSES
   

   

.. py:data:: LICENSE_FILES
   

   

.. py:class:: LicenseCMD(record, interactive = False, **kwargs)

   Bases: :py:obj:`mloq.command.Command`

   Implement the functionality of the license Command.

   .. py:attribute:: cmd_name
      :annotation: = license

      

   .. py:attribute:: files
      

      

   .. py:attribute:: LICENSES
      

      

   .. py:attribute:: disable
      

      

   .. py:attribute:: license
      

      

   .. py:attribute:: copyright_year
      

      

   .. py:attribute:: copyright_holder
      

      

   .. py:attribute:: project_name
      

      

   .. py:attribute:: project_url
      

      

   .. py:attribute:: email
      

      

   .. py:method:: interactive_config()

      Generate the configuration of the project interactively.


   .. py:method:: record_files()

      Register the files that will be generated by mloq.



